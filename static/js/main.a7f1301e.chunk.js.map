{"version":3,"sources":["components/Container/Container.styled.js","components/Container/Container.jsx","components/Section/Section.styled.js","components/Section/Section.jsx","components/ContactForm/ContactForm.styled.js","components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.styled.js","components/ContactItem/ContactItem.styled.js","components/ContactItem/ContactItem.jsx","components/ContactList/ContactList.jsx","components/ContactsFilter/ContactsFilter.styled.js","components/ContactsFilter/ContactsFilter.jsx","App.js","index.js"],"names":["MainContainer","styled","div","Container","children","BoxSection","Title","h1","Section","title","defaultProps","Form","form","Label","label","Input","input","Button","button","ContactForm","onSubmit","useState","name","setName","number","setNumber","handleChange","event","target","value","resetForm","preventDefault","contact","id","nanoid","type","placeholder","onChange","pattern","required","List","ul","Item","li","Name","span","Number","a","ContactItem","onDeleteContact","href","onClick","ContactList","contacts","map","ContactsFilter","filter","onFilter","App","JSON","parse","window","localStorage","getItem","setContacts","setFilter","useEffect","console","log","setItem","stringify","filterContacts","useMemo","normalizedFilter","toLowerCase","includes","newContact","sort","toast","warn","currentTarget","position","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a7f1301e.chunk.js","sourcesContent":["import styled from \"@emotion/styled\";\n\n\nexport const MainContainer = styled.div`\nmax-width: 1440px;\nmargin-left: auto;\nmargin-right: auto;\npadding-left: 15px;\npadding-right: 15px;\n`; ","\nimport {MainContainer} from './Container.styled'\n\n\nconst Container = ({ children }) => <MainContainer>{children}</MainContainer>;\n\nexport default Container;","\nimport styled from \"@emotion/styled\";\n\nexport const BoxSection = styled.div `\npadding: 15px;\ntext-align: center;\n`;\nexport const Title = styled.h1`\nmargin-bottom: 15px;\n`;","import PropTypes from 'prop-types';\nimport { BoxSection, Title } from './Section.styled';\n\nconst Section = ({ title, children}) => {\n    return (\n      <BoxSection >\n        <Title>{title}</Title>\n        {children}\n      </BoxSection>\n    );\n  };\n\n\n\n  Section.defaultProps = {\n    title: '',\n   \n  };\n  \n  Section.propTypes = {\n    title: PropTypes.string.isRequired ,\n    children: PropTypes.node,\n  };\n\nexport default Section;","import styled from \"@emotion/styled\";\n\nexport const Form = styled.form`\nwidth: 100%;\nmargin-right: auto;\nmargin-left: auto;\nmargin-bottom: 15px;\npadding: 15px;\nborder: 1px solid #d4d4d4;\n`;\nexport const Label = styled.label`\ndisplay: flex;\nflex-direction: column;\n\nmargin-bottom: 15px;\n\ncolor: #333232;\n`;\nexport const Input = styled.input`\npadding: 11px;\nborder: 1px solid rgba(33, 33, 33, 0.2);\nborder-radius: 4px;\n\ncursor: pointer;\n\n&:focus {\n    outline: transparent;\n    border: 1px solid #2196f3;\n}\n`;\nexport const Button = styled.button`\nmin-width: 150px;\n  height: 40px;\n  border: 0px solid transparent;\n  border-radius: 4px;\n\n  color: #fff;\n  background-color: #2196f3;\n\n  box-shadow: 0px 4px 4px rgb(0 0 0 / 15%);\n\n  opacity: 1;\n\n  transition: opacity 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  cursor: pointer;\n\n  &:hover,\n  &:focus {\n    opacity: 0.8;\n\n    transition: opacity 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  }\n\n`;","import {useState} from 'react';\nimport PropTypes from 'prop-types';\nimport { nanoid } from 'nanoid'\nimport {Form, Label, Input, Button} from './ContactForm.styled'\n\n\n\nconst ContactForm =({onSubmit})=>{\n\n\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n\n  const handleChange = event => {\n    const { name, value } = event.target;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        return;\n    }\n  };\n  // Метод на отправке формы. Формирует из стейта контакт и передает во внешний метод\n const  handleSubmit = event => {\n    event.preventDefault();\n\n    const contact = {\n      id: nanoid(),\n      name: name,\n      number: number,\n    };\n     \n    onSubmit(contact); // Внешний метод в пропсах класса\n\n    resetForm();\n  };\n\n  // Сброс полей формы (после отправки)\n const resetForm = () => {\n  setName('');\n  setNumber('');\n  };\n\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      <Label >\n        Name\n        <Input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Contact name\"\n          aria-label=\"Input for your name\"\n          value={name} // Пишем значение в стейт\n          onChange={handleChange} // Наблюдающий метод\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n        />\n      </Label>\n      <Label >\n        Number\n        <Input\n          type=\"tel\"\n          name=\"number\"\n          placeholder=\"Phone number\"\n          aria-label=\"Input for your phone number\"\n          value={number} // Пишем значение в стейт\n          onChange={handleChange} // Наблюдающий метод\n          pattern=\"(\\+?( |-|\\.)?\\d{1,2}( |-|\\.)?)?(\\(?\\d{3}\\)?|\\d{3})( |-|\\.)?(\\d{3}( |-|\\.)?\\d{4})\"\n          title=\"Номер телефона должен состоять из 11-12 цифр и может содержать цифры, пробелы, тире, пузатые скобки и может начинаться с +\"\n          required\n        />\n      </Label>\n     \n        <Button type=\"submit\" >\n          Add contact\n        </Button>\n      \n    </Form>)\n\n}\n\nContactForm.propTypes ={\n  onSubmit : PropTypes.func.isRequired,\n}\n\n  export default ContactForm;","import styled from '@emotion/styled';\n\n\nexport const List = styled.ul`\ndisplay: flex;\nflex-wrap: wrap;\n\nmargin-left: -15px;\nmargin-top: -15px;\n\n`;","import styled from '@emotion/styled';\n\n \nexport const Item = styled.li `\ndisplay: flex;\njustify-content: space-around;\n\nflex-basis: calc(100% / 1 - 15px);\npadding: 15px 5px;\nborder: 1px solid #d4d4d4;\n\ntext-align: center;\n\nmargin-left: 15px;\nmargin-top: 15px\n\n\n`; \n export const Name = styled.span `\n color: #333232;\n  font-weight: 500;\n `; \n\n\nexport const Number = styled.a`\nmargin-right: 15px;\n\ncolor: #000000;\n\nfont-weight: 700;\ntext-decoration: none;\n\ntransition: color 250ms cubic-bezier(0.4, 0, 0.2, 1);\n&:hover,\n  &:focus {\n    color: #2196f3;\n    transition: color 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  }\n\n`; \n\nexport const Button = styled.button`min-width: 50px;\nheight: 30px;\nborder: 0px solid transparent;\nborder-radius: 4px;\n\ncolor: #fff;\nbackground-color: #86888a;\n\nbox-shadow: 0px 4px 4px rgb(0 0 0 / 15%);\n\nopacity: 1;\n\ntransition: opacity 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\ncursor: pointer;\n\n\n&:hover,\n&:focus {\n\n    opacity: 0.8;\n    background-color: #2196f3;\n    transition: background-color 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  }\n\n`\n;","\n  \nimport PropTypes from 'prop-types';\nimport {Item, Name, Number, Button} from './ContactItem.styled'\n\n\n// Принимает один контакт и метод для удаления контакта\n\nconst ContactItem =({contact ,onDeleteContact}) =>{\n    const { id, name, number  } = contact;\n\n    return (\n\n        <Item>\n          <Name>{name}: </Name>\n               <Number href={`tel:${number}`} >\n                  {number}\n                </Number>\n                <Button\n                  \n                   type=\"button\"\n                   onClick={() => onDeleteContact(id)} // Метод на клике, принимает ID контакта\n                 >\n                  Delete\n                 </Button>\n              </Item>\n    )\n}\n\n\nContactItem.propTypes ={\n    id: PropTypes.string,\n    name: PropTypes.string,\n    number: PropTypes.string,\n    onDeleteContact: PropTypes.func.isRequired,\n\n}\n\nexport default ContactItem;\n\n","\nimport {List} from './ContactList.styled';\nimport PropTypes from 'prop-types';\nimport ContactItem from \"../ContactItem/ContactItem\";\n\n// Принимает все контакты и пробрасывает дальше метод для удаления контакта\n\nconst  ContactList =({ contacts,onDeleteContact })=>{\n\n  return (\n    <List>\n  {contacts.map(contact => (\n    <ContactItem\n    key={contact.id}\n    contact={contact}\n    onDeleteContact={onDeleteContact}\n    />\n  ))}\n</List>\n)\n}\n\n\n\nContactList.propTypes ={\n    onDeleteContact :PropTypes.func,\n\n}\n\nexport default ContactList;\n\n\n\n","import styled  from \"@emotion/styled\";\n\nexport const Form=styled.form\n`\n\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\n\nwidth: 300px;\npadding-bottom: 30px;\n\n`;\n\n\n\nexport const Label = styled.label \n`\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\n\nmargin-bottom: 15px;\n\ncolor: #333232;\n`;\n\n\nexport const Input=styled.input\n`\nwidth: 100%;\npadding: 11px;\nborder: 1px solid rgba(33, 33, 33, 0.2);\nborder-radius: 4px;\ntransition: all 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\ncursor: pointer;\n\n&:focus {\n  outline: transparent;\n  border: 1px solid #2196f3;\n};\n\n`;","\nimport PropTypes from 'prop-types';\nimport {Form, Label,Input} from './ContactsFilter.styled'\n\n// Принимает значение с поля фильтра и метод пишущий в стейт\n\n\nconst ContactsFilter =({filter, onFilter})=>{\n  return (\n    <>\n    <Form >\n      <Label>\n        <h3>Find contacts by name:</h3>\n        <Input\n          type=\"text\"\n          value={filter}\n          onChange={onFilter}\n    />\n      </Label>\n    </Form>\n  </>\n);\n\n}\n\n\nContactsFilter.propTypes ={\nfilter : PropTypes.string.isRequired,\nonFilter: PropTypes.func.isRequired,\n}\n\n\nexport default ContactsFilter;","import { useState, useMemo, useEffect } from 'react';\nimport Container from './components/Container/Container.jsx';\nimport Section from './components/Section/Section.jsx';\nimport ContactForm from './components/ContactForm/ContactForm.jsx';\nimport ContactList from './components/ContactList/ContactList.jsx';\nimport ContactsFilter from './components/ContactsFilter/ContactsFilter.jsx';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nconst App = () => {\n  // Используем ленивую инициализацию для получения данных из localStorage.\n  const [contacts, setContacts] = useState(() => {\n    return JSON.parse(window.localStorage.getItem('contacts')) ?? [];\n  });\n  const [filter, setFilter] = useState('');\n\n  // При изменении контактов пишем в localStorage\n  useEffect(() => {\n    console.log('set item');\n    window.localStorage.setItem('contacts', JSON.stringify(contacts));\n  }, [contacts]);\n\n  // Добавляет контакт\n  const addContact = newContact => {\n    // Проверка на дубликат\n    const duplicateName = contacts.sort(\n      contact => contact.name.toLowerCase() === newContact.name.toLowerCase(),\n    );\n    if (duplicateName) {\n      toast.warn(`${newContact.name} is already on contacts`);\n\n      return;\n    }\n\n    setContacts([...contacts, newContact]);\n  };\n\n  //  Следит за полем фильтрации и пишет в стейт\n  const changeFilter = event => {\n    event.preventDefault();\n    setFilter(event.currentTarget.value);\n  };\n\n  // Фильтрует и возвращает результат фильтра\n\n  const filterContacts = useMemo(() => {\n    const normalizedFilter = filter.toLowerCase();\n\n    if (filter !== '') {\n      return contacts.filter(contact =>\n        contact.name.toLowerCase().includes(normalizedFilter),\n      );\n    } else {\n      return contacts;\n    }\n  }, [contacts, filter]);\n\n  // Удаляет контакт\n\n  const deleteContact = id => {\n    setContacts(contacts.filter(contact => contact.id !== id));\n  };\n\n  return (\n    <Container>\n      <Section title=\"Phonebook\">\n        <ContactForm onSubmit={addContact} />\n      </Section>\n\n      <Section title=\"Contacts\">\n        <ContactsFilter filter={filter} onFilter={changeFilter} />\n        <ContactList\n          contacts={filterContacts}\n          onDeleteContact={deleteContact}\n        />\n      </Section>\n\n      <ToastContainer\n        position=\"top-right\"\n        autoClose={3000}\n        hideProgressBar={false}\n        newestOnTop={false}\n        closeOnClick\n        rtl={false}\n        pauseOnFocusLoss\n        draggable\n        pauseOnHover\n      />\n    </Container>\n  );\n};\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'modern-normalize/modern-normalize.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}